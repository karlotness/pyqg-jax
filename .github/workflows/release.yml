name: "Release"
on:
  push:
    tags:
      - 'v[0-9]*'
permissions:
  contents: read
jobs:
  check:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Check version
      run: |
        VERSION="$(sed -n -E 's!^__version__\s*(:\s*[^=[:space:]]+\s*)?=\s*"\s*([^[:space:]]+)\s*"\s*$!\2!p' src/pyqg_jax/__init__.py)"
        printf 'Detected version: %s\n' "$VERSION"
        if [[ "$VERSION" == *'dev'* ]]; then
          printf 'Development version. Not releasing.\n'
          exit 1
        fi
        if [[ "v${VERSION}" != "$GITHUB_REF_NAME" ]]; then
          printf 'Package and tag version do not match. Not releasing.\n'
          exit 1
        fi
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.11'
    - name: Cache pip downloads
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade tox
    - name: Run tox tests
      run: python -m tox run -e py
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
    - name: Build package
      run: python -m build
    - name: Store artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        if-no-files-found: error
        path: |
          dist/*.tar.gz
          dist/*.whl
  check-artifacts:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '3.11'
    - name: Cache pip downloads
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-releasecheckartifacts-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ github.run_id }}
        restore-keys: |
          pip-releasecheckartifacts-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-releasecheck-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
          pip-test-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade twine
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: dist/
    - name: Check artifacts
      run: python -m twine check --strict dist/*.tar.gz dist/*.whl
  draft-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check-artifacts
    permissions:
      contents: write
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: dist/
    - name: Draft release body
      run: |
        {
          printf '<details><summary>SHA256 Checksums</summary>\n\n```\n'
          sha256sum dist/*.tar.gz dist/*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n\n'
          printf '<details><summary>SHA512 Checksums</summary>\n\n```\n'
          sha512sum dist/*.tar.gz dist/*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n'
        } > release_body.md
    - name: Create release
      run: gh release create "$GITHUB_REF_NAME" --title "$GITHUB_REF_NAME" --target "$GITHUB_SHA" --draft --notes-file 'release_body.md' --repo "$GITHUB_REPOSITORY" dist/*.tar.gz dist/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Prepare step summary
      run: printf '# Artifact Contents\n' > "$GITHUB_STEP_SUMMARY"
    - name: Summarize checksums
      run: |
        {
          printf '## Checksums\n\n'
          printf '<details><summary>SHA256 Checksums</summary>\n\n```\n'
          sha256sum dist/*.tar.gz dist/*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n\n'
          printf '<details><summary>SHA512 Checksums</summary>\n\n```\n'
          sha512sum dist/*.tar.gz dist/*.whl | sed 's!dist/!!'
          printf '```\n\n</details>\n\n'
        } >> "$GITHUB_STEP_SUMMARY"
    - name: Summarize contents
      run: |
        printf '## Contents\n' >> "$GITHUB_STEP_SUMMARY"
        for f in dist/*.tar.gz; do
          {
            printf '<details><summary>%s</summary>\n\n```\n' "$(basename "$f")"
            tar -tzvf "$f"
            printf '```\n\n</details>\n\n'
          } >> "$GITHUB_STEP_SUMMARY"
        done
        for f in dist/*.whl; do
          {
            printf '<details><summary>%s</summary>\n\n```\n' "$(basename "$f")"
            zipinfo "$f"
            printf '```\n\n</details>\n\n'
          } >> "$GITHUB_STEP_SUMMARY"
        done
  upload:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: draft-release
    environment: pypi
    permissions:
      id-token: write
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: dist/
    - name: Upload package
      uses: pypa/gh-action-pypi-publish@release/v1
  publish-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: upload
    permissions:
      contents: write
    steps:
    - name: Publish GitHub release
      run: gh release edit "$GITHUB_REF_NAME" --draft=false --repo "$GITHUB_REPOSITORY"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
